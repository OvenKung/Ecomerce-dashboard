import { NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

// Mock settings data
const mockSettings = {
  store: {
    name: 'ร้านค้าออนไลน์',
    description: 'ร้านขายเครื่องใช้ไฟฟ้าและอิเล็กทรอนิกส์',
    email: 'contact@store.com',
    phone: '02-123-4567',
    address: '123 ถนนสุขุมวิท แขวงคลองเตย เขตคลองเตย กรุงเทพมหานคร 10110',
    website: 'https://store.com',
    logo: null,
    currency: 'THB',
    timezone: 'Asia/Bangkok',
    language: 'th'
  },
  notifications: {
    emailNotifications: true,
    orderNotifications: true,
    inventoryAlerts: true,
    customerNotifications: false,
    marketingEmails: true,
    systemUpdates: true,
    lowStockThreshold: 10,
    emailTemplate: 'default'
  },
  payment: {
    enableCreditCard: true,
    enableBankTransfer: true,
    enablePromptPay: true,
    enableCOD: false,
    paymentMethods: [
      { id: 'credit_card', name: 'บัตรเครดิต/เดบิต', enabled: true },
      { id: 'bank_transfer', name: 'โอนเงินผ่านธนาคาร', enabled: true },
      { id: 'promptpay', name: 'พร้อมเพย์', enabled: true },
      { id: 'cod', name: 'เก็บเงินปลายทาง', enabled: false }
    ],
    taxRate: 7.0,
    shippingFee: 50
  },
  shipping: {
    freeShippingThreshold: 1000,
    defaultShippingFee: 50,
    expressShippingFee: 100,
    shippingZones: [
      { id: 'bangkok', name: 'กรุงเทพฯ และปริมณฑล', fee: 50 },
      { id: 'central', name: 'ภาคกลาง', fee: 80 },
      { id: 'north', name: 'ภาคเหนือ', fee: 120 },
      { id: 'northeast', name: 'ภาคอีสาน', fee: 120 },
      { id: 'south', name: 'ภาคใต้', fee: 150 }
    ],
    estimatedDelivery: {
      standard: '3-5 วันทำการ',
      express: '1-2 วันทำการ'
    }
  },
  security: {
    enableTwoFactor: false,
    sessionTimeout: 24,
    passwordPolicy: {
      minLength: 8,
      requireUppercase: true,
      requireLowercase: true,
      requireNumbers: true,
      requireSpecialChars: false
    },
    allowedLoginAttempts: 5,
    lockoutDuration: 30
  },
  api: {
    enableAPI: true,
    apiKeys: [
      {
        id: 'key-1',
        name: 'Mobile App',
        key: 'sk_test_12345...',
        permissions: ['read', 'write'],
        lastUsed: '2024-01-15T10:30:00Z',
        active: true
      }
    ],
    rateLimit: 1000,
    webhookUrl: ''
  }
}

export async function GET(request: Request) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const section = searchParams.get('section')

    if (section) {
      const sectionData = mockSettings[section as keyof typeof mockSettings]
      if (sectionData) {
        return NextResponse.json({ [section]: sectionData })
      } else {
        return NextResponse.json({ error: 'Section not found' }, { status: 404 })
      }
    }

    return NextResponse.json(mockSettings)

  } catch (error) {
    console.error('Error fetching settings:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(request: Request) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session || session.user.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { section, data } = body

    if (!section || !data) {
      return NextResponse.json({ error: 'Missing section or data' }, { status: 400 })
    }

    // Update the specific section
    if (mockSettings[section as keyof typeof mockSettings]) {
      (mockSettings as any)[section] = { ...mockSettings[section as keyof typeof mockSettings], ...data }
      
      return NextResponse.json({ 
        message: 'Settings updated successfully',
        [section]: (mockSettings as any)[section]
      })
    } else {
      return NextResponse.json({ error: 'Invalid section' }, { status: 400 })
    }

  } catch (error) {
    console.error('Error updating settings:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}